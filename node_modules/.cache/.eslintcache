[{"/Users/eelank/reactmega/megaeel/src/index.js":"1","/Users/eelank/reactmega/megaeel/src/App.js":"2","/Users/eelank/reactmega/megaeel/src/Hangman.js":"3","/Users/eelank/reactmega/megaeel/src/Weather.js":"4","/Users/eelank/reactmega/megaeel/src/Number.js":"5","/Users/eelank/reactmega/megaeel/src/Movies.js":"6"},{"size":322,"mtime":1689454615886,"results":"7","hashOfConfig":"8"},{"size":1352,"mtime":1689454615849,"results":"9","hashOfConfig":"8"},{"size":3529,"mtime":1689454615849,"results":"10","hashOfConfig":"8"},{"size":5292,"mtime":1689454615850,"results":"11","hashOfConfig":"8"},{"size":6339,"mtime":1689454615850,"results":"12","hashOfConfig":"8"},{"size":8061,"mtime":1689517271886,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"1o1tf2v",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"17"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"17"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"17"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"17"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"37"},"/Users/eelank/reactmega/megaeel/src/index.js",[],[],[],"/Users/eelank/reactmega/megaeel/src/App.js",["38","39"],[],"import React from 'react'\nimport { Routes, Route, Link } from 'react-router-dom'\n\nimport Hangman from './Hangman'\nimport Number from './Number'\nimport Weather from './Weather'\nimport Movies from './Movies'\n\nimport './App.css'\n\nimport Container from 'react-bootstrap/Container'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport { NavLink } from 'react-router-dom'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nconst links = [\n  ['Hangman Cheatsheet', <Hangman />],\n  ['Number Guessing Game', <Number />],\n  ['Weather Finder By City', <Weather />],\n  ['Box Office and Budget Finder', <Movies />]\n]\n\nconst App = () => (\n  <>\n    <Navbar collapseOnSelect expand='lg' bg='primary' data-bs-theme='dark' sticky='top'>\n      <Container>\n        <Navbar.Toggle aria-controls='responsive-navbar-nav' />\n        <Navbar.Collapse id='responsive-navbar-nav'>\n          <Nav className='me-auto'>\n            {links.map((w, i) => (\n              <NavLink key={i} id='RouterNavLink' to={`/${w[0].toLowerCase()}`}>\n                {w[0]}\n              </NavLink>\n            ))}\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n    <Routes>\n      {links.map((w, i) => (\n        <Route key={i} path={`/${w[0].toLowerCase()}`} element={eval(w[1])} />\n      ))}\n    </Routes>\n  </>\n)\n\nexport default App","/Users/eelank/reactmega/megaeel/src/Hangman.js",["40","41","42","43","44","45"],[],"import { useState } from 'react'\n\nimport data from './data.json'\n\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport ListGroup from 'react-bootstrap/ListGroup'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\nfunction generateWords (w, notLetters) {\n  try {\n    w = w.toLowerCase()\n\n    notLetters = notLetters.toLowerCase()\n    var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/\n\n    const words = data.words\n    var wordsFnd = []\n    var no_letters_pattern\n    if (notLetters.length < 1) {\n      no_letters_pattern = new RegExp('^[^]*$')\n    } else {\n      no_letters_pattern = new RegExp('^[^' + notLetters + ']*$')\n    }\n    var pattern = new RegExp(w, 'g')\n    for (let i = 0; i < words.length; i++) {\n      if (\n        words[i].match(pattern) != null &&\n        words[i].match(pattern)[0].length == words[i].length &&\n        words[i].match(no_letters_pattern) != null\n      ) {\n        const word =\n          words[i][0].toUpperCase() +\n          words[i].slice(1, words[i].length).toLowerCase()\n        wordsFnd.push(word)\n      } else {\n        // alert(\"Couldn't find it!\")\n      }\n    }\n\n    return wordsFnd\n  } catch {\n    return []\n  }\n}\n\nfunction Hangman () {\n  document.title = 'Hangman Cheatsheet'\n  const [word, setWord] = useState('')\n  const [notLetters, setNotLetters] = useState('')\n  const [wordLen, setWordLength] = useState(0)\n  var wordsFND\n  const ChangeValue = event => {\n    setWord(event.target.value)\n    setWordLength(word.length)\n  }\n\n  const ChangeNotLetter = event => {\n    setNotLetters(event.target.value)\n  }\n\n  return (\n    <>\n      <Container>\n        <h1\n          className='mt-4'\n          style={({ textDecorationLine: 'underline' }, { fontWeight: 'bold' })}\n        >\n          Hangman Cheatsheet:\n        </h1>\n        <h2 className='mt-1 mb-4'>\n          This game is to see available choices for your hangman round(Make sure\n          you put some letters like vowels first before checking). Replace\n          missing letters with dots. If there are letters that are not in the\n          word, make sure to put it in the second input box and don't seperate\n          each letter with a comma:{' '}\n        </h2>\n        <Row className='justify-content-md-center'>\n          <Col xs lg='5'>\n            <Form.Control\n              type='text'\n              placeholder='Word:'\n              value={word}\n              onChange={ChangeValue}\n              pattern='^[a-zA-Z]*$'\n              autoFocus\n            />\n          </Col>\n        </Row>\n\n        <Row className='justify-content-md-center mt-3 mb-3'>\n          <Col xs lg='5'>\n            <Form.Control\n              type='text'\n              placeholder='Letters not in word: '\n              value={notLetters}\n              onChange={ChangeNotLetter}\n              pattern='^[a-zA-Z]*$'\n            />\n          </Col>\n        </Row>\n        <ListGroup>\n          {generateWords(word, notLetters).map((w, i) => (\n            <Row className='justify-content-md-center mt-1' key={i.toString()}>\n              <Col xs='true' lg='5'>\n                <ListGroup.Item\n                  xs='true'\n                  lg='2'\n                  key={i.toString()}\n                  variant='primary'\n                >\n                  {w}\n                </ListGroup.Item>\n              </Col>\n            </Row>\n          ))}\n        </ListGroup>\n      </Container>\n    </>\n  )\n}\n\nexport default Hangman","/Users/eelank/reactmega/megaeel/src/Weather.js",["46","47","48","49","50"],[],"import {useState, useEffect} from 'react'\n\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Image from 'react-bootstrap/Image';\n\n\nimport axios from 'axios'\n\n\n\nvar link = ''\n\nfunction titleCase(str) {\n    var splitStr = str.toLowerCase().split(' ');\n    for (var i = 0; i < splitStr.length; i++) {\n      // You do not need to check if i is larger than splitStr length, as your for does that for you\n      // Assign it back to the array\n      splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n    }\n    // Directly return the joined string\n    return splitStr.join(' ');\n}\n\nfunction Card(props) {\n    console.log(props.data);\n    try {\n    if(props.data[0]) {\n    return (\n        <>\n        <h1>{props.data[0]}</h1>\n        <div className=\"d-flex justify-content-center\">\n        <Image src={props.data[1]} alt={props.data[props.data.length-1]}/>\n       \n      </div>\n      <h3>{props.data[2]}</h3>\n      <h3>{props.data[3]}</h3>\n      \n      \n        \n        \n        \n        </>\n    )} else {\n        return (\n            <h3 style={{visibility: props.submitted == true ? 'visible' : 'hidden'}}>That city is not found!</h3>\n        )\n    }} catch {\n        return (\n            <h3 style={{visibility: props.submitted == true ? 'visible' : 'hidden'}}>That city is not found!</h3>\n        )\n    }\n\n    \n}\n\nfunction Weather() {\n    const [submitted,setSubmitted] = useState(false)\n    document.title = \"Weather Finder By City\"\n    const [city, setCity] = useState('');\n    \n    const [weather, setWeather] = useState([])\n    \n    \n    \n    \n    function submit (e) {\n        // setCity(e.target.value)\n        \n        \n        \n        setSubmitted(true)\n        \n        \n       \n        const baseURL = 'https://api.openweathermap.org/geo/1.0/direct?q=' + city + '&appid=daa772f5693c7cb6303ee768a285ab75';\n        async function fetchData() {\n            const response = await fetch(\n                baseURL\n            );\n            const data = await response.json();\n            const results = data;\n            \n            getWeather(results[0])\n            }\n        fetchData();\n        e.preventDefault();\n        };\n    \n   function getWeather(data) {\n    setSubmitted(true)\n        async function fetchData() {\n            \n              \n              \n                  var country = {};\n                  const response = await fetch('https://restcountries.com/v3.1/all');\n                  const data3 =  await response.json()\n                  for (var i = 0; i < data3.length; i++) {\n                      country[data3[i]['cca2']] = data3[i]['name']['official'];\n                  }\n                  try {\n                  const country2 = country[data.country];\n                  console.log(country2);\n                  \n                  const lat = data.lat;\n                  const lon = data.lon;\n                  const response2 = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=daa772f5693c7cb6303ee768a285ab75&units=metric`)\n                  const data2 = await response2.json();\n                  var imgURL;\n                  let temperature;\n                  let description;                        \n                  imgURL = \"http://openweathermap.org/img/wn/\" + data2.weather[0].icon + \"@2x.png\";\n                  temperature = Math.round(parseInt(data2.main.temp));\n                  temperature = temperature + '°C'\n                  description = titleCase(data2.weather[0].description)\n                  const displayCity = (data.name + ', ' + data.state + ', ' + country2).replace(', undefined, ', ', ');      \n                  setWeather([displayCity,imgURL,temperature,description])\n\n                  } catch {\n                    setWeather(undefined)\n                    console.log(\"\");\n                  }\n        }\n        fetchData()\n\n\n\n\n                        \n                    \n          \n          \n          \n    \n    };\n\n    \n          \n          \n          \n    \n    \n\n    // \n\n\n\n\n\n\n\n    \n\n    function change(e) {\n        console.log(e.target.value);\n        setCity(e.target.value); \n        // submitted = false;\n        \n    }\n    \n    return (\n        <>\n        <h1\n        className='mt-4'\n        style={({ textDecorationLine: 'underline' }, { fontWeight: 'bold' })}\n      >\n        Weather Finder By City:\n      </h1>\n      <h3>If you want to search by the country and city, type in the country code.  For example for kingston,ontario,canada, type <strong>kingston,ca</strong>!</h3>\n      \n\n        <Row className='justify-content-md-center mb-2'>\n            <Col xs lg='3'>\n                <form onSubmit={submit}>\n                    <Form.Control\n                    type='text'\n                    className={`mb-4`}      \n                    placeholder='Please type a city:'\n                    \n                    value={city}\n                    onChange={(e) => change(e)}\n                    autoFocus\n                    />\n                </form>\n            </Col>\n        </Row>\n        \n            \n                \n            <Card\n        data={weather} submitted={submitted}/>\n            \n        \n    </>\n    )\n    }\n\n\n\n\n\nexport default Weather;","/Users/eelank/reactmega/megaeel/src/Number.js",["51","52","53","54","55","56","57","58","59","60"],[],"import React, { useEffect, useState } from 'react'\n\nimport Container from 'react-bootstrap/Container'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport Button from 'react-bootstrap/Button'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\n\nconst guesses = {}\nvar tries = 0\n\nfunction LetUserPick (props) {\n  console.log(props.randomNum)\n  const [validated, setValidated] = useState(false)\n  const [correctGuess, setCorrectGuess] = useState(null)\n  const [guess, setGuess] = useState('')\n  const [textAlert, setTextAlert] = useState('')\n  const [show, setShow] = useState(false)\n\n  function store (e) {\n        parseInt(e.target.value)    \n        setGuess(e.target.value.replace(/\\D/g, \"\"));\n  }\n\n  function check (guess) {\n    if (parseInt(guess) == parseInt(props.randomNum)) {\n      setCorrectGuess(true)\n      setTextAlert('Correct! You got in ' + guesses.length + ' tries.')\n    } else {\n      setCorrectGuess(false)\n      if (parseInt(guess) > props.randomNum) {\n        setTextAlert('Too High!')\n      } else {\n        setTextAlert('Too Low!')\n      }\n      setGuess('')\n    }\n  }\n\n  const myRef = React.createRef()\n  useEffect(() => {\n    myRef.current.focus()\n    console.log(correctGuess)\n    console.log(guesses)\n  })\n\n  function submit (event) {\n    setGuess(event.target.value)\n    event.preventDefault()\n    check(guess)\n    tries += 1\n    if (parseInt(guess) > parseInt(props.randomNum)) {\n      guesses[' ' + guess] = 'Too High!'\n    } else if (parseInt(guess) < parseInt(props.randomNum)) {\n      guesses[' ' + guess] = 'Too Low!'\n    } else if (parseInt(guess) === parseInt(props.randomNum)) {\n      guesses[' ' + guess] = `Correct: ${String(tries)} ${\n        tries < 2 ? 'try' : 'tries!'\n      }`\n    }\n  }\n\n  return (\n    <>\n      <h5\n        className='mb-4'\n        style={{ visibility: props.isChecked ? 'visible' : 'hidden' }}\n      >\n        The computer has generated a random number from 1 to {props.max}\n        (excluding). Try to guess it:\n      </h5>\n      <Row className='justify-content-md-center mb-2'>\n        <Col xs lg='5'>\n          <form onSubmit={submit}>\n            <Form.Control\n              type='text'\n              className={`mb-4 ${\n                correctGuess == true ? 'text-success border-success' : ''\n              }`}\n              placeholder='Your Guess:'\n              onChange={e => store(e)}\n              value={guess}\n              disabled={correctGuess ? true : false}\n              style={{ visibility: props.isChecked ? 'visible' : 'hidden' }}\n              ref={myRef}\n            />\n            {/* This is alert to tell user if low or high:  */}\n          </form>\n        </Col>\n      </Row>\n      <ListGroup>\n        {Object.keys(guesses).map((g, i) => (\n          <>\n            <div className='d-flex justify-content-center'>\n                <Button\n                  \n                  className=\"btn mr-2\"\n                  style={{marginRight: '20px'}}\n                  key={i.toString()}\n                  variant={\n                    parseInt(g) == parseInt(props.randomNum)\n                      ? 'outline-success active'\n                      : 'outline-danger active'\n                  }\n                >\n                  {g}\n                </Button>\n                <span className='pl-2'>\n                \n                </span>\n                <Button\n                  \n                  className='btn'\n                  \n                  variant={\n                    parseInt(g) == parseInt(props.randomNum)\n                      ? 'outline-success active'\n                      : 'outline-danger active'\n                  }\n                >\n                  {guesses[g]}\n                </Button>\n            </div>\n            <br />\n          </>\n        ))}\n      </ListGroup>\n      <div className='text-center'>\n        <Button\n          size='xs'\n          variant='outline-success'\n          className='mt-2'\n          onClick={() => {\n            window.location.reload()\n          }}\n          style={{ visibility: correctGuess ? 'visible' : 'hidden' }}\n        >\n          Play Again\n        </Button>\n      </div>\n    </>\n  )\n}\n\nfunction Number () {\n  document.title = 'Number Guessing Game'\n  const [max, setMax] = useState('')\n  const [isChecked, setChecked] = useState(false)\n\n  const nums = [\n    { value: 10 },\n    { value: 25 },\n    { value: 50 },\n    { value: 100 },\n    { value: 500 },\n    { value: 1000 }\n  ]\n\n  const change = e => {\n    setMax(parseInt(e.target.value))\n    setChecked(true)\n  }\n\n  return (\n    <Container>\n      <>\n        <h1\n          className='mt-4'\n          style={({ textDecorationLine: 'underline' }, { fontWeight: 'bold' })}\n        >\n          Number Guessing Game:\n        </h1>\n\n        <h2 className='mt-1'>\n          This game is to see how fast you can guess a number by. Pick a number\n          that suits you(this number is the max the computer can generate a\n          number for(excluding that number):\n        </h2>\n        <div className='d-flex justify-content-center'>\n          <Col lg='5'>\n            {nums.map((num, idx) => (\n              <>\n                <ToggleButton\n                  key={idx}\n                  id={`radio-${idx}`}\n                  className='m-1 mb-4'\n                  type='radio'\n                  variant='outline-primary'\n                  name='radio'\n                  value={num.value}\n                  checked={max === parseInt(num.value)}\n                  onChange={e => change(e)}\n                  disabled={isChecked}\n                >\n                  {num.value}\n                </ToggleButton>\n              </>\n            ))}\n          </Col>\n        </div>\n        <GenerateRandomNum max={max} isChecked={isChecked} />\n      </>\n    </Container>\n  )\n}\n\nconst GenerateRandomNum = props => {\n  const num = props.max\n  var randomNum = Math.floor(Math.random() * (num - 1)) + 1\n  if (randomNum % 5 == 0) {\n    randomNum = Math.floor(Math.random() * (num - 1)) + 1\n  }\n\n  return (\n    <>\n      <LetUserPick\n        randomNum={randomNum}\n        isChecked={props.isChecked}\n        max={num}\n      />\n    </>\n  )\n}\n\nexport default Number\n","/Users/eelank/reactmega/megaeel/src/Movies.js",["61","62","63","64","65","66","67","68","69"],[],"import Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Image from 'react-bootstrap/Image';\nimport { useEffect, useState } from 'react';\nimport Card from 'react-bootstrap/Card'\nimport React from 'react';\nimport Spinner from 'react-bootstrap/Spinner'\n\n\n\n\n// function removeMatchedDuplicates(list) {\n//     const mySet1 = new Set();\n//     const dict = {};\n//     for(let i = 0; i < list.length; i++) {\n//         if(dict[list[i][0]] == undefined)  {\n//             dict[list[i][0]] = [list[i][1],list[i][2],list[i][3],list[i][4],1]\n//         } else {\n//             dict[list[i][0]][4] += 1\n//         }\n//     }\n\n    \n//     mySet1.add([]);\n    \n//     list = []\n//     for (let i of Object.keys(dict))  {\n//         list.push([i,dict[i][0],dict[i][1],dict[i][2]])\n//     }\n\n\n//     // getMovieData(list[0][0], list[0][1])\n//     const list2 = [];\n//     // useEffect(() => {\n//     //     async function getMovieData(link,name) {\n//     //         var url = 'https://c5r5fokuj3.execute-api.us-east-2.amazonaws.com/movies?url=' + link + '&name=' + name;\n//     //         const response = await fetch(\n//     //             url\n//     //         );\n//     //         const data = await response.json();\n//     //         return [Object.values(data)];\n//     //     }\n//     //     async function pushdata() {\n//     //         for(let i = 0; i < list.length; i++) {\n        \n//     //             list2.push(await getMovieData(list[i][0], list[i][1]));\n//     //              console.log(list2);   \n                \n            \n//     //         }\n//     //     }\n//     //     pushdata()\n//         return list\n\n    // })\n\n    \n    \n    \n        \n    \n\n\n// }\n\nfunction Render(props) {\n    \n    // console.log(props);\n    // var matched1 =[];\n    // const [matched,setMatched] = useState([])\n    // // useEffect(() => {\n    // //     async function hello() {\n    // //         setMatched(removeMatchedDuplicates(props.matched))\n    // //     }  \n    // //     hello()\n    // //     console.log(matched);\n    // // })\n    // console.log(removeMatchedDuplicates(props.matched)[0]);\n    console.log(props.isLoading);\n    \n\n        \n        \n\n    \n     // 1) word[1]: Link\n     // 2) word[2]: Budget\n     // 3) word[0]: Name\n     // 3) word[3]: Box Office\n\n                    // <button key={idx}><br/>{word[1]}</button>\n                    // <button>{word[2]}</button>\n                    // <button>{word[0]}</button>\n                    // <button>{word[3]}</button>\n     return (\n        <>\n\n            <div className=\"row justify-content-md-center\">\n            <div className=\"col-sm-4\">\n            {/* {matched} */}\n            {props.matched.map((word) => (\n                <>\n                    \n                    \n                        <div className=\"card border-primary mb-2\">\n\n                        <div className=\"card-body text-center\">\n                            <strong className=\"card-title\" style={{fontSize: \"2rem\"}}>{word[0]}:</strong>\n                            <p className=\"card-text\" style={{padding: 0, margin: 0,fontSize: \"1.5rem\"}}>Budget: {word[2]}</p>\n                            <p className=\"card-text\" style={{padding: 0, margin: 0, fontSize: \"1.5rem\"}}>Box-Office: {word[3]}</p>\n\n                            <a href={word[1]} className=\"btn btn-primary\" target='_blank'>More Details</a>\n                        </div>\n                        </div>\n                    \n                    \n                </>\n            ))}\n            </div>\n            </div>\n            \n        </>\n    )\n     \n    //  console.log(matched1);\n    \n    \n    // \n}\n\n\nfunction Movies () {\n    document.title = 'Box Office & Budget Finder'\n    \n    const [movie, setMovie] = useState('')\n    // const [matched,setMatched] = useState([])\n    function change(e) {\n        \n        setMovie(e.target.value.toLowerCase());\n\n        // inputWords = movieName.toLowerCase().replace(/\"/g, \"\").replace(/'/g, \"\").replace(/\\(|_\\)/g, \"\").replace('-', \"\").replace(')', \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\"(\", \"\");\n\n\n        // console.log(movie);\n\n    }\n    const [fndMovies,setFndMovies] = useState([])\n    const [isLoading, setIsLoading] = useState(false)\n    function submit(e) {\n        setIsLoading(true);\n        e.preventDefault();\n        \n        \n        const url = 'https://eelanpy1.s3.us-east-2.amazonaws.com/movies.json'\n        \n        \n        // console.log(inputWords);\n        async function fetchData() {\n            var matched = []\n            const response = await fetch(\n                url\n            );\n            const data = await response.json();\n            \n            // console.log(matched);\n            for (let i of Object.keys(data)) {\n\n                for (let j in data[i]) {\n                    var movieName = j.toLowerCase().replace(/\"/g, \"\").replace(/'/g, \"\").replace(/\\(|_\\)/g, \"\").replace('-', \"\").replace(')', \"\").replace(\"(\", \"\");\n\n                    movieName = movieName.replace(\" \", \"\").replace(\" \", \"\")\n                    \n          \n        \n                    // console.log(\"Input: \")\n                    \n                    // console.log(\"Movie: \")\n                    // console.log(movieName);\n                    if (movieName.includes(movie.toLowerCase().replace(/\"/g, \"\").replace(/'/g, \"\").replace(/\\(|_\\)/g, \"\").replace('-', \"\").replace(')', \"\").replace(\" \", \"\").replace(\" \", \"\").replace(\"(\", \"\")) == true && matched.includes([data[i][j],j]) == false){\n                    \n                        \n                        \n                        var url2 = 'https://c5r5fokuj3.execute-api.us-east-2.amazonaws.com/movies?url=' +  data[i][j]+ '&name=' + j;\n                        const response2 = await fetch(\n                            url2\n                        );\n                        const data2 = await response2.json();\n                        // return [Object.values(data)];\n                        if(matched.includes([j,data[i][j],data2[\"budget\"],data2[\"box-office\"]]) == false || matched.includes([j,data[i][j],data2[\"budget\"],data2[\"box-office\"]]) == undefined) {\n                         matched.push([j,data[i][j],data2[\"budget\"],data2[\"box-office\"]]);\n                    }\n                        \n                      }\n\n\n                }\n                \n              }\n              matched = new Set(matched)\n\n            matched = Array.from(matched)\n              setIsLoading(false);\n            \n              return matched\n            }\n        (async () => {\n                setFndMovies(await fetchData())\n                \n                \n             })()\n        \n\n\n\n        \n\n        // console.log(matched);\n        // setMatched(Array.from(matched))\n        \n        \n        \n    }\n\n\n    \n    \n\n    return (\n        <>\n        <div className='container'>\n        <h1\n        className='mt-4'\n        style={({ textDecorationLine: 'underline' }, { fontWeight: 'bold' })}\n      >\n        Box Office and Budget Finder:\n      </h1>\n      <h2 className='mt-1'>\n          This tool is to show you the weather you type in the input below:\n        </h2>\n\n        <Row className='justify-content-md-center mb-2'>\n            <Col xs lg='3'>\n                <form onSubmit={submit}>\n                    <Form.Control\n                    type='text'\n                    className={`mb-4`}      \n                    placeholder='Please type a movie:'\n                    \n                    value={movie}\n                    onChange={(e) => change(e)}\n                    autoFocus\n                    />\n                </form>\n                \n            </Col>\n            <Spinner animation=\"border\" variant=\"primary\" style={{visibility: (isLoading == true) ? 'visible' : 'hidden'}}/>\n        </Row>\n        \n        <Render matched={fndMovies} isLoading={isLoading}></Render>\n        {/* {matched}\n        {matched.map((word,key)=> (\n            <button>{word[1]}</button>\n        ))} */}\n        </div>\n        </>\n        )\n}\n\n\nexport default Movies;",{"ruleId":"70","severity":1,"message":"71","line":2,"column":25,"nodeType":"72","messageId":"73","endLine":2,"endColumn":29},{"ruleId":"74","severity":1,"message":"75","line":43,"column":65,"nodeType":"76","messageId":"77","endLine":43,"endColumn":69},{"ruleId":"70","severity":1,"message":"78","line":19,"column":9,"nodeType":"72","messageId":"73","endLine":19,"endColumn":15},{"ruleId":"79","severity":1,"message":"80","line":19,"column":37,"nodeType":"81","messageId":"82","endLine":19,"endColumn":38,"suggestions":"83"},{"ruleId":"79","severity":1,"message":"84","line":19,"column":54,"nodeType":"81","messageId":"82","endLine":19,"endColumn":55,"suggestions":"85"},{"ruleId":"86","severity":1,"message":"87","line":33,"column":43,"nodeType":"88","messageId":"77","endLine":33,"endColumn":45},{"ruleId":"70","severity":1,"message":"89","line":55,"column":10,"nodeType":"72","messageId":"73","endLine":55,"endColumn":17},{"ruleId":"70","severity":1,"message":"90","line":56,"column":7,"nodeType":"72","messageId":"73","endLine":56,"endColumn":15},{"ruleId":"70","severity":1,"message":"91","line":1,"column":19,"nodeType":"72","messageId":"73","endLine":1,"endColumn":28},{"ruleId":"70","severity":1,"message":"92","line":9,"column":8,"nodeType":"72","messageId":"73","endLine":9,"endColumn":13},{"ruleId":"70","severity":1,"message":"93","line":13,"column":5,"nodeType":"72","messageId":"73","endLine":13,"endColumn":9},{"ruleId":"86","severity":1,"message":"87","line":47,"column":53,"nodeType":"88","messageId":"77","endLine":47,"endColumn":55},{"ruleId":"86","severity":1,"message":"87","line":51,"column":53,"nodeType":"88","messageId":"77","endLine":51,"endColumn":55},{"ruleId":"70","severity":1,"message":"94","line":20,"column":10,"nodeType":"72","messageId":"73","endLine":20,"endColumn":19},{"ruleId":"70","severity":1,"message":"95","line":20,"column":21,"nodeType":"72","messageId":"73","endLine":20,"endColumn":33},{"ruleId":"70","severity":1,"message":"96","line":23,"column":10,"nodeType":"72","messageId":"73","endLine":23,"endColumn":19},{"ruleId":"70","severity":1,"message":"97","line":24,"column":10,"nodeType":"72","messageId":"73","endLine":24,"endColumn":14},{"ruleId":"70","severity":1,"message":"98","line":24,"column":16,"nodeType":"72","messageId":"73","endLine":24,"endColumn":23},{"ruleId":"86","severity":1,"message":"87","line":32,"column":25,"nodeType":"88","messageId":"77","endLine":32,"endColumn":27},{"ruleId":"86","severity":1,"message":"87","line":84,"column":30,"nodeType":"88","messageId":"77","endLine":84,"endColumn":32},{"ruleId":"86","severity":1,"message":"87","line":107,"column":33,"nodeType":"88","messageId":"77","endLine":107,"endColumn":35},{"ruleId":"86","severity":1,"message":"87","line":122,"column":33,"nodeType":"88","messageId":"77","endLine":122,"endColumn":35},{"ruleId":"86","severity":1,"message":"87","line":216,"column":21,"nodeType":"88","messageId":"77","endLine":216,"endColumn":23},{"ruleId":"70","severity":1,"message":"99","line":4,"column":8,"nodeType":"72","messageId":"73","endLine":4,"endColumn":13},{"ruleId":"70","severity":1,"message":"91","line":5,"column":10,"nodeType":"72","messageId":"73","endLine":5,"endColumn":19},{"ruleId":"70","severity":1,"message":"100","line":6,"column":8,"nodeType":"72","messageId":"73","endLine":6,"endColumn":12},{"ruleId":"101","severity":1,"message":"102","line":113,"column":29,"nodeType":"103","messageId":"104","endLine":113,"endColumn":91,"fix":"105"},{"ruleId":"86","severity":1,"message":"87","line":180,"column":209,"nodeType":"88","messageId":"77","endLine":180,"endColumn":211},{"ruleId":"86","severity":1,"message":"87","line":180,"column":253,"nodeType":"88","messageId":"77","endLine":180,"endColumn":255},{"ruleId":"86","severity":1,"message":"87","line":190,"column":97,"nodeType":"88","messageId":"77","endLine":190,"endColumn":99},{"ruleId":"86","severity":1,"message":"87","line":190,"column":178,"nodeType":"88","messageId":"77","endLine":190,"endColumn":180},{"ruleId":"86","severity":1,"message":"87","line":257,"column":90,"nodeType":"88","messageId":"77","endLine":257,"endColumn":92},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-eval","eval can be harmful.","CallExpression","unexpected","'format' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["106","107"],"Unnecessary escape character: \\/.",["108","109"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'wordLen' is assigned a value but never used.","'wordsFND' is defined but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","'link' is assigned a value but never used.","'validated' is assigned a value but never used.","'setValidated' is assigned a value but never used.","'textAlert' is assigned a value but never used.","'show' is assigned a value but never used.","'setShow' is assigned a value but never used.","'Image' is defined but never used.","'Card' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"110","text":"111"},{"messageId":"112","fix":"113","desc":"114"},{"messageId":"115","fix":"116","desc":"117"},{"messageId":"112","fix":"118","desc":"114"},{"messageId":"115","fix":"119","desc":"117"},[3381,3381]," rel=\"noreferrer\"","removeEscape",{"range":"120","text":"121"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"122","text":"123"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"124","text":"121"},{"range":"125","text":"123"},[483,484],"",[483,483],"\\",[500,501],[500,500]]